%
% This code implements the classical four stage fourth order
% Runge Kutta method to solve an ODE system. After the calculation,
% it saves the workspace to a data file.
%
clear
figure(1)
%
m=2;

w0=[1.5, 0];
h=0.05;
nstep=20/h;
%
w=zeros(nstep+1,m);
t=zeros(nstep+1,1);
t(1)=0;
w(1,1:m)=w0;
%
p=4;
d=[0,   1/2, 1/2, 1  ];
c=[0,   0,   0,   0  ;
   1/2, 0,   0,   0  ;
   0,   1/2, 0,   0  ;
   0,   0,   1,   0  ];
b=[1/6, 1/3, 1/3, 1/6];
k=zeros(p,m);
%
for j=1:nstep,
  for i=1:p,
    k(i,1:m)=h*f_sys(w(j,1:m)+c(i,1:i-1)*k(1:i-1,1:m), t(j)+d(i)*h);
  end
  w(j+1,1:m)=w(j,1:m)+b*k;
  t(j+1)=t(j)+h;
end

plot(t(:,1),w(:,1)./1.5,'-g')
xlabel('t')
ylabel('y(t)/y(0)')
title('Figure 1: y(t)/y(0) against t for t in [0,25]')

td=t(:,1);
yd=w(:,1);
%
Ta=[6:0.1:9];
n=size(Ta,2);
da=zeros(1,n);
%
%for k=1:n,
 for k=1:n   
  da(k)=dd(Ta(k),td,yd);
end
%
%save data_d_T

figure (2)
%clf reset
plot(Ta,da,'linewidth',2.0)

xlabel('T')
ylabel('dd(T)')

td=Ta;
yd=da;
%
a=6;
b=9;
tol=1.0e-10;
n=0;
%begin g.s.
g=(sqrt(5)-1)/2;
r1=a+(b-a)*(1-g);
f1=dd(r1,td,yd);
r2=a+(b-a)*g;
f2=dd(r2,td,yd);
%
%
while (b-a) > tol
  n=n+1;
  if f1 < f2
    b=r2;
    r2=r1
    f2=f1
    r1=a+(b-a)*(1-g)
    f1=dd(r1,td,yd)
  else
    a=r1
    r1=r2;
    f1=f2;
    r2=a+(b-a)*g;
    f2=dd(r2,td,yd);
  end
end
T=(a+b)/2
save data_d_T